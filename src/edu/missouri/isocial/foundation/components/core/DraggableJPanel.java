/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.missouri.isocial.foundation.components.core;

import edu.missouri.isocial.foundation.Editor;
import edu.missouri.isocial.foundation.components.ConnectionInfo;
import edu.missouri.isocial.foundation.components.core.brushes.DraggableJPanelBrush;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Ryan
 */
public abstract class DraggableJPanel<T> extends javax.swing.JPanel {

    /**
     * Creates new form DraggableJPanel
     */
    private final Editor editor;
    private DraggableJPanelController controller;
    private final List<ConnectionInfo> connections;
    private Color borderColor = Color.BLACK;
    private DraggableJPanelBrush brush;
    private T model;
    public DraggableJPanel(Editor editor, T model) {
        this.editor = editor;
        this.connections = new ArrayList<ConnectionInfo>();
        initComponents();

        this.setOpaque(false);
        this.model = model;
        controller = new DraggableJPanelController(this);
        brush = new DraggableJPanelBrush(this);
    }

    public void setBorderColor(Color color) {
        this.borderColor = color;
    }
    
        
    public T getModel() {
        return model;
    }
    
    
    
    
    @Override
    protected void paintComponent(Graphics g1) {
        brush.paint((Graphics2D)g1);
        repaintConnections();
    }
    
    public void repaintConnections() {
        for(ConnectionInfo connection: connections) {
            
            Point startPoint = connection.getStartConnector().getLocationOnScreen();
            Point endPoint = connection.getEndConnector().getLocationOnScreen();
            this.getGraphics().setColor(Color.green);
           this.getGraphics().drawLine(startPoint.x, startPoint.y, endPoint.x, endPoint.y);
           System.out.println("DRAWING CONNECTION: "
                   + "\nSTART->("+startPoint.x+","+startPoint.y+")\n"
                   + "END->("+endPoint.x+","+endPoint.y+")");
           
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 0, 51));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    
    public Editor getEditor() {
        return editor;
    }

    /**
     * Perform any upkeep needed before this instance is removed from the editor
     */
    protected void cleanup() {
        //override this.
    }
    
    public Color getBorderColor() {
        return borderColor;
    }
}
